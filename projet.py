#!/usr/bin/env python3

import streamlit as st
import base64
from streamlit_option_menu import option_menu
from PIL import Image
from io import BytesIO
import random
import glob
import pymongo
import plotly.express as px
from pathlib import Path

import pandas as pd
import numpy as np

# Fonction pour √©tablir la communication √† MongoDB avec les param√®tres de s√©curit√© saisie dans le fichier qui se trouve dans  ~/<dossier_du_projet/.streamlit/secrets.toml
def init_connection():
    return pymongo.MongoClient(**st.secrets["mongo"])

# Etablit la connexion via MongoDB
client = init_connection()

# R√©cup√©re la base de donn√©e movies
db = client.movies

# Nettoyage des documents dans Movies on remarque qu'aucun film n'est renseign√© pour les documents avec un _id d√©butant avec _design
# Fonction de suppression des documents ind√©sirables dans Movies
def remove_design_documents():
    try:
        # Suppression des documents o√π _id commence par '_design'
        remove = db.utilisateurs.delete_many({"_id": {"$regex": "^_design"}})
    # En cas d'√©chec de la suppresion
    except Exception as e:
        st.error(f"Erreur lors de la suppression : {e}")

# Mise √† jour de la variable genre due √† diff√©rents genre s√©pare par des ',' tel qu'un genre d'un film est d√©fini comme Action,Adventure,Sci-FI
# D√©composer les diff√©rents caract√©ristiques du genre afin d'obtenir une liste de genre comprenant Action puis Adventure et Sci-Fi pour un m√™me film
# Afin d'obtenir non pas un genre : Action,Adventure et Sci-fi mais le genre : Action et le genre : Adventure et le genre: Sci-fi
def update_documents():
    try:
        result = db.utilisateurs.update_many(
            {"genre": {"$exists": True}},
            [
                {
                    "$set":{
                        "genre": {
                            "$cond": {
                                "if": {"$isArray": "$genre"},
                                "then": "$genre",
                                "else" : {"$split": ["$genre", ","]}
                            }
                        }
                    }
                }
            ]
        ) 
    # En cas d'√©chec de la mise √† jour
    except Exception as e:
        st.error(f"Errreur lors de la mise √† jour : {e}")

# Nettoyage de la base de donn√©e MongoDB movies
remove_design_documents()
# Mise √† jour des documents MongoDB movies
update_documents()
# D√©compose la liste genre pour cr√©er des √©l√©ments individuels
new_genre = [{"$unwind": "$genre"},
    # Regroupe les √©l√©ments individuels entre eux | ex: l'√©l√©ment "Action" va regrouper tout les fims qui ont le genre "Action"
    {"$group": {"_id": "$genre"}}]

# Agr√©gations des √©lements individuels de la base de donn√©es
# Attention en aucun cas elle met √† jour la base de donn√©e
# c.a.d : "Elle fait une lecture d'analyse des documents" √† prendre avec des pincettes
result = db.utilisateurs.aggregate(new_genre)

# Ajout du nom et du logo du site dans la barre d'onglet
# Emp√™che la barre menu de s'ouvrir lorsqu'on acc√®de au site
# Ajuste la longueur des textes sur les pages pour √©viter un retour √† la ligne trop rapide
st.set_page_config(page_title="Movies", page_icon=":clapper:", layout="wide", initial_sidebar_state="collapsed")

# Menu de pages √† gauche de l'application
with st.sidebar:
    page = option_menu(
            # Pas de titre Sp√©cial
            menu_title= "",
            # Les noms des pages
            options=["Accueil", "Recherche de Films", "Classement", "Analyse"],
            # Les icones √† gauches des noms des pages
            icons=["globe", "film", "trophy", "bar-chart-line"],
            # Page par default Accueil
            default_index=0)

# Traitement de la page Accueil
if page == "Accueil":
    
    def create_collage(image_paths, width=250, height=350):
        images = [Image.open(img).resize((width, height)) for img in image_paths[:12]]
        final_width = width * 3 + 30
        final_height = height * 4 + 40
        collage = Image.new("RGB", (final_width, final_height), (0, 0, 0))

        x_offset, y_offset = 10, 10
        for i, img in enumerate(images):
            col = i % 3
            row = i // 3
            x_random = random.randint(-10, 10)
            y_random = random.randint(-10, 10)
            x = col * (width + 10) + x_offset + x_random
            y = row * (height + 10) + y_offset + y_random
            collage.paste(img, (x, y))
        
        return collage
    
    def get_base64_from_image(image):
        buffered = BytesIO()
        image.save(buffered, format="JPEG")
        return base64.b64encode(buffered.getvalue()).decode()

    image_paths = glob.glob("/home/guesdon/Documents/myprojet/cover/*.jpg")
    if len(image_paths) >= 12:
        collage_image = create_collage(image_paths)
        base64_image = get_base64_from_image(collage_image)
    st.markdown(
    """
    <style>
    /* Appliquer un fond en d√©grad√© pour un effet cin√©ma */
    .stApp {
        background: #1a1a1a;
        color: white;
        height: 100vh;
        text-align: center;
        white-space: nowrap;
    }
    /* Supprimer l'ombre du header pour un look plus propre */
    header[data-testid="stHeader"]::before {
        content: "";
        background: black;
        height: 100%;
        width: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }
    </style>
    """,
    unsafe_allow_html=True)
    
    # Premier bloc (Titre et Introduction)
    st.markdown(
    """
    <div class="header">
        <h1>üé¨ Bienvenue sur Movies Data Visualization</h1>
        <p>Explorez et analysez les films √† travers des donn√©es interactives issues de MongoDB et Neo4j. 
        D√©couvrez les tendances du box-office, les classements, les genres les plus populaires et bien plus encore !</p>
    </div>
    """,
    unsafe_allow_html=True)

    # Deuxi√®me bloc (Affiches + Texte explicatif)
    st.markdown(
    """
    <style>
    .stApp {{
        background: url('data:image/jpg;base64,{base64_image}') no-repeat center center fixed;
        background-size: cover;
    }}
    </style>
    """,
    unsafe_allow_html=True)


# Traitement de la page Recherche de Films
elif page == "Recherche de Films":
    st.title("Recherche de Films par Ann√©es !")
    
    # Filtre les films par ann√©e
    year = db.utilisateurs.distinct("year")
    # Trie les ann√©es par ordre d√©croissant gr√¢ce au reverse
    year.sort(reverse=True)
    # Insertion de l'options 'Tous' pour afficher les films de tous les ann√©es
    year.insert(0, "Tous")
    # S√©lection d√©roulante de l'ensemble des ann√©es
    selected_year = st.selectbox("S√©lectionne une ann√©e :", year)

    # Trie par ordre Alphab√©tique les genres distinct extrait des √©lements individuels dans result via '_id'
    genre = sorted([r['_id'] for r in result])
    # S√©lection d√©roulante des types de genres √† choix multiples
    selected_genre = st.multiselect("S√©lectionne un ou plusieurs genres :", genre)
    
    def verification_saisie(nombre):
        try:
            float(nombre)
            return True
        except ValueError:
            st.error("Veuillez saisir un nombre valide.")
            return False

    rang_minimun = st.number_input("Entrez le rang minimun du film [0-100]:")
    revenue_minimun = st.number_input("Entrez le revenue minimun du film [0 - 1000] :")
    
    if verification_saisie(rang_minimun):
        st.write(f"Le rang minimun des films est {rang_minimun}.")
    else:
        st.write(f"Le rang minimun des films {rang_minimun} est erron√©.")

    if verification_saisie(revenue_minimun):
        st.write(f"Le revenue minimun des films est {revenue_minimun}.")
    else:
        st.write(f"Le revenue minimun des films {revenue_minimun} est non conforme.")

    # V√©rifie si la cl√© "time" n'existe pas d√©j√† dans l'√©tat de la session
    if "time" not in st.session_state:
        # Si la cl√© "time" n'existe pas, on l'initialise √† None
        st.session_state.time = None
    
    # V√©rifie si la cl√© "click" n'existe pas d√©j√† dans l'√©tat de la session
    if "click" not in st.session_state:
        # Si la cl√© "click" n'existe pas, on l'initialise √† None
        st.session_state.click = None

    ###########  PROBLEM le bouton ne reste pas rouge apr√®s avoir click√© ailleurs malgr√© la persistance de son activation
      ######     PROBLEM due au fonctionnement de Streamlit selon mes recherches sur Stackoverflow

    ########### changement de couleur lorsque le bouton est on mais sa persistance ne marche pas
    ########### fonction non utilis√©
    def button_style(button_name):
        if st.session_state.click == button_name:
            return "background-color: yelllow; color: white;"
        return "background-color: gray; color: black;"
    ###########
    ###########


    # Cr√©ation de deux colonnes sur la m√™me ligne
    time1, time2=st.columns(2)
    
    # Traitement de la premi√®re colonne
    with time1:
        
        #button_style_short = button_style("short") DESIGN DU BOUTON NON UTILISE EN RAISON DES PROBLEMES EXPLIQUES
        
        # Cr√©ation du bouton 'Film court' et message d'indication lors du maintien
        if st.button("Film court", key="short", help="Affiche les films les plus courts"):
            # La variable 'click' dans la session est √©gale 'short' cela signifie que le bouton a √©t√© pr√©cedemment activ√©
            if st.session_state.click == "short":
                # R√©initialisation des variables 'time' et 'click' lorsqu'on d√©sactive l'√©tat du bouton 'Film court'
                st.session_state.time = None # Annule l'affichage des films courts et se met par default
                st.session_state.click = None # D√©sactive l'√©tat de s√©lection du bouton, bouton = off

            # la variable 'click' dans la session n'est pas 'short' alors l'√©tat du bouton n'est pas activ√©
            else:
                # Activation du bouton 'Film court' en d√©finissant 'time' et 'click' avec des nouvelles valeurs
                st.session_state.time = 1 # D√©finit time a 1 pour les films courts
                st.session_state.click = "short" # Marque le bouton 'Film court' activ√©, bouton = on
    
    # Traitement de la seconde colonne
    with time2:

        #button_style_long = button_style("long") DESIGN DU BOUTON NON UTILISE EN RAISON DES PROBLEMES EXPLIQUES
        
        # Cr√©ation du bouton 'Film long' et message d'indication lors du maintien
        if st.button("Film long", key="long", help="Affiche les films les plus longs"):
            # La variable 'click' dans la session est √©gale 'long' cela signifie que le bouton a √©t√© pr√©cedemment activ√©
            if st.session_state.click == "long":
                # R√©initialisation des variables 'time' et 'click' lorsqu'on d√©sactive l'√©tat du bouton 'Film long'
                st.session_state.time = None # Annule l'affichage des films longs et set met par default
                st.session_state.click = None # D√©sactive l'√©tat de s√©lection du bouton, bouton = off
            
            # la variable 'click' dans la session n'est pas 'long' alors l'√©tat du bouton n'est pas activ√©
            else:
                # Activation du bouton 'Film long' en d√©finissant 'time' et 'click' avec des nouvelles valeurs
                st.session_state.time = -1 # D√©finit time a 1 pour les films longs
                st.session_state.click = "long" # Marque le bouton 'Film long' activ√©, bouton = on

    # Trie les films par ann√©es et genre et rang et revenue | option "Tous" signifie prendre tous les films disponible sans les ann√©es
    if selected_year != "Tous" and selected_genre and rang_minimun and revenue_minimun:
        films = db.utilisateurs.find({"year": selected_year, "genre": {"$all": selected_genre}, "Metascore": {"$gt" : rang_minimun, "$nin" : ["NA", "None", ""]}, "Revenue (Millions)": {"$gt": revenue_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year != "Tous" and rang_minimun and revenue_minimun:
        films = db.utilisateurs.find({"year": selected_year, "Metascore": {"$gt" : rang_minimun, "$nin" : ["NA", "None", ""]}, "Revenue (Millions)": {"$gt": revenue_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year != "Tous" and selected_genre and rang_minimun:
        films = db.utilisateurs.find({"year": selected_year, "genre": {"$all": selected_genre}, "Metascore": {"$gte" : rang_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year != "Tous" and selected_genre and revenue_minimun:
        films = db.utilisateurs.find({"year": selected_year, "genre": {"$all": selected_genre}, "Revenue (Millions)": {"$gte" : revenue_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year != "Tous" and selected_genre:
        films = db.utilisateurs.find({"year": selected_year, "genre": {"$all": selected_genre}})
    elif selected_year != "Tous" and rang_minimun and  revenue_minimun:
        films = db.distributions.film({"year": selected_year, "Revenue (Millions)": {"gte" : revenue_minimun, "$nin": ["NA", "None", ""]}, "Metascore": {"$gte": rang_minimun, "$nin": ["NA", "None", ""]}})
    elif selected_year != "Tous" and rang_minimun:
        films = db.utilisateurs.find({"year": selected_year, "Metascore": {"$gte" : rang_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year != "Tous" and revenue_minimun:
        films = db.utilisateurs.find({"year": selected_year, "Revenue (Millions)": {"$gte" : revenue_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year == "Tous" and selected_genre and rang_minimun and revenue_minimun:
        films = db.utilisateurs.find({"genre": {"$all": selected_genre}, "Metascore": {"$gte" : rang_minimun, "$nin" : ["NA", "None", ""]}, "Revenue (Millions)": {"$gte" : revenue_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year == "Tous" and selected_genre and rang_minimun:
        films = db.utilisateurs.find({"genre": {"$all": selected_genre}, "Metascore": {"$gte" : rang_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year == "Tous" and selected_genre and revenue_minimun:
        films = db.utilisateurs.find({"genre": {"$all": selected_genre}, "Revenue (Millions)": {"$gte" : revenue_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year == "Tous" and rang_minimun and revenue_minimun:
        films = db.utilisateurs.find({"Metascore": {"$gt" : rang_minimun, "$nin" : ["NA", "None", ""]}, "Revenue (Millions)": {"$gt": revenue_minimun, "$nin" : ["NA", "None", ""]}}) 
    elif selected_year == "Tous" and selected_genre:
        films = db.utilisateurs.find({"genre": {"$all": selected_genre}})
    elif selected_year == "Tous" and revenue_minimun:
        films = db.utilisateurs.find({"Revenue (Millions)": {"$gte" : revenue_minimun, "$nin" : ["NA", "None", ""]}})
    elif selected_year == "Tous" and rang_minimun:
        films = db.utilisateurs.find({"Metascore": {"$gte": rang_minimun, "$nin": ["NA", "None", ""]}})
    elif selected_year != "Tous":
        films = db.utilisateurs.find({"year": selected_year})
    else:
        films = db.utilisateurs.find()

    # Activer les effets des boutons Film court et Film long
    if st.session_state.time is None:
        # cas o√π le bouton est off mettre par default
        films_time = films.sort("title", 1)
    else:
        # cas o√π le bouton est on
        time = 1 if st.session_state.time == 1 else -1
        films_time = films.sort("Runtime (Minutes)", time)

    # Place dans une liste la recherche du film avec l'√©tat des deux bouton 'Film court' et 'Film long'
    films_list = list(films_time)
    if len(films_list) > 0:
        st.subheader(f"Films de l'ann√©e {selected_year} : {len(films_list)} films trouv√©s")
        for film in films_list:
            st.write(f"Nom du Film : {film["title"]}")
            st.write(f"Genre du Film : {', '.join(film['genre'])}")
            st.write(f"R√©alisateur : {film["Director"]}")
            if "Metascore" in film and film["Metascore"] not in ["NA", "None", ""]:
                st.write(f"Classement : {film["Metascore"]}")
            st.write(f"Synopsis : {film["Description"]}")
            if "Revenue (Millions)" in film and film["Revenue (Millions)"] not in ["NA", "None", ""]:
                st.write(f"Revenue : {film["Revenue (Millions)"]}")
            st.write(f"Dur√©e : {film["Runtime (Minutes)"]}")
            st.write(f"Ann√©e : {film["year"]}")
            st.markdown("<hr style='border: 1px solid #CCCCCC;'>", unsafe_allow_html=True)        
    else:
        st.write("Aucun film trouv√© pour cette ann√©e.")

elif page == "Classement":
    st.title("TOP 3 des Films les mieux not√©s !")

    # R√©cup√©rer les films avec une note et les trier pour obtenir le top 3
    classement = db.utilisateurs.find({"rating": {"$ne": "unrated"}})
    top_3 = list(classement.sort([("rating", pymongo.DESCENDING), ("Votes", pymongo.DESCENDING)]).limit(3))

    if len(top_3) > 0:
        # Utiliser st.columns pour afficher les films c√¥te √† c√¥te
        cols = st.columns(3)  # Cr√©er 3 colonnes pour les 3 films

        for i, top in enumerate(top_3):
            with cols[i]:
                st.markdown(f"""
                <br>
                <div style="background-color: #f0f0f0; padding: 20px; border-radius: 50%; width: 180px; height: 180px; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
                    <strong>{i+1}.{top["title"]}</strong>
                    <small>Rating: {top["rating"]}</small>
                    <small>Votes: {top["Votes"]}</small>
                </div>
                <br>
                """, unsafe_allow_html=True)

    else:
        st.write("Les films n'ont pas √©t√© not√©s !")

elif page == "Analyse":
   
    # Premi√®re Partie : les meilleurs revenue en fonction du genre et de l'ann√©e

    st.title("Analyse des diff√©rents documents dans Movies")
    st.subheader("Les Films avec les meilleurs Revenues en fonction du Genre par Ann√©e")
    
    # Trie par ordre Alphab√©tique les genres distinct extrait des √©lements individuels dans result via '_id'
    genre = sorted([r['_id'] for r in result])
    # S√©lection d√©roulante des types de genres √† choix multiples
    selected_genre = st.multiselect("S√©lectionne un ou plusieurs genres :", genre)
    
    stats = list(db.utilisateurs.find({"genre": {"$all": selected_genre, "$exists": True}, "year": {"$exists": True}, "Revenue (Millions)": {"$nin" : ["NA", "Node", ""], "$exists" : True }}))
    
    genre_year_revenue_data = [(genre, x["year"], x.get("Revenue (Millions)", "")) for x in stats for genre in x["genre"]]
    
    df = pd.DataFrame(genre_year_revenue_data, columns=["Genre", "Ann√©e", "Revenue"])
    df["Revenue"] = pd.to_numeric(df["Revenue"], errors="coerce")

    if selected_genre:
        df = df[df["Genre"].isin(selected_genre)]
    
    df_resultat = df.groupby(["Ann√©e", "Genre"]).agg(median_revenue = pd.NamedAgg(column="Revenue", aggfunc="median")).reset_index()
    # Fusion des genres dans le cas de la s√©lection de plusieurs genres
    df_resultat["Genres"] = df_resultat.groupby("Ann√©e")["Genre"].transform(lambda x: ', '.join(sorted(x.unique()))) 
    # Avoir l'ann√©e comme index et les genres comme colonnes
    df_ordre = df_resultat.pivot_table(index="Ann√©e", columns="Genres", values="median_revenue", aggfunc="median")
    
    # Correction de l'affichage des Ann√©es : 2016 au lieu de 2,016.0
    df_ordre.index = df_ordre.index.astype(str)

    # Affichage du graphique
    st.line_chart(df_ordre)
    # Affichage du tableau
    st.write("Observation des R√©sultats: Les revenus sont exprim√©s en millions de dollars am√©ricains.")
    st.write(df_ordre)
    st.markdown("<hr style='border: 1px solid #CCCCCC;'>", unsafe_allow_html=True)

###################### Deuxi√®me Partie : Relation entre la Dur√©e des Film et leur revenue ###############

    st.subheader("Les Revenues  en fonction de la Dur√©e du Film")
    stats_duree = list(db.utilisateurs.find({"Runtime (Minutes)": {"$exists": True}, "Revenue (Millions)": {"$nin": ["NA", "Node", ""], "$exists" : True}}))
    revenue_duree = [(x["Runtime (Minutes)"], x.get("Revenue (Millions)", "")) for x in stats_duree]

    df_2 = pd.DataFrame(revenue_duree, columns = ["Duree", "Revenue"])
    df_2["Duree"]= pd.to_numeric(df_2["Duree"], errors="coerce")
    df_2["Revenue"]= pd.to_numeric(df_2["Revenue"], errors="coerce")
    
    df_result = df_2.groupby(["Duree"]).agg(median_revenues = pd.NamedAgg(column="Revenue", aggfunc="median")).reset_index()
    
    def convertir_minutes_en_HeureMinute(minutes):
        heures = minutes // 60
        mins = minutes % 60
        return f"{heures}h {mins}m"

    df_result["Duree_hm"] = df_result["Duree"].apply(convertir_minutes_en_HeureMinute) 

    st.line_chart(df_result.set_index("Duree")["median_revenues"])
    st.write("Observation des R√©sultats: Les revenus sont exprim√©s en millions de dollars am√©ricains.")
    st.dataframe(df_result[["Duree_hm", "median_revenues"]].set_index("Duree_hm"))
    st.markdown("<hr style='border: 1px solid #CCCCCC;'>", unsafe_allow_html=True)
############ Troisi√®me partie : Relation entre la moyenne de dur√©e et les film par ann√©e ###########

    st.subheader("L'√©volution de la dur√©e moyenne des films par d√©cennie")
    stats_evolution = list(db.utilisateurs.find({"year": {"$exists": True}, "Runtime (Minutes)": {"$exists": True}}))
    evolution_year = [(x["year"], x.get("Runtime (Minutes)", "")) for x in stats_evolution]

    df_3 = pd.DataFrame(evolution_year, columns = ["year", "Duree"])
    df_3["Duree"] = pd.to_numeric(df_3["Duree"], errors="coerce")
    df_3["decennie"] = (df_3["year"] // 10) * 10 
    df_evolution = df_3.groupby(["decennie"]).agg(median_duree= pd.NamedAgg(column="Duree", aggfunc='median')).reset_index()
    
    st.line_chart(df_evolution.set_index("decennie")["median_duree"])
    df_pie_duree = df_3.groupby("decennie")["Duree"].median().reset_index()

    # Utiliser la fonction de conversion pour afficher la dur√©e en heures et minutes
    df_pie_duree["Duree_hm"] = df_pie_duree["Duree"].apply(convertir_minutes_en_HeureMinute)

    # Renommer la colonne "Duree" en "median_duree" pour que cela corresponde dans le graphique
    df_pie_duree = df_pie_duree.rename(columns={"Duree": "median_duree"})

    # Cr√©ation du camembert avec Plotly
    fig = px.pie(df_pie_duree, names="decennie", values="median_duree", title="R√©partition des films par D√©cennie", hover_data=["Duree_hm"])

    # Affichage du camembert dans Streamlit
    st.plotly_chart(fig)
